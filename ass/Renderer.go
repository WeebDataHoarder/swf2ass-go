package ass

import (
	"fmt"
	swftypes "git.gammaspectra.live/WeebDataHoarder/swf2ass-go/swf/types"
	"git.gammaspectra.live/WeebDataHoarder/swf2ass-go/types"
	"slices"
)

type Renderer struct {
	Header        []string
	RunningBuffer []*Line
}

func NewRenderer(frameRate float64, viewPort types.Rectangle[swftypes.Twip]) *Renderer {
	display := viewPort.Divide(swftypes.TwipFactor)

	width := int64(display.Width()) * GlobalSettings.VideoScaleMultiplier
	height := int64(display.Height()) * GlobalSettings.VideoScaleMultiplier

	ar := float64(width) / float64(height)

	frameRate *= GlobalSettings.VideoRateMultiplier

	return &Renderer{
		Header: []string{
			"[Script Info]",
			"; Script generated by swf2ass Renderer",
			"; https://git.gammaspectra.live/WeebDataHoarder/swf2ass-go",
			"Title: swf2ass",
			"ScriptType: v4.00+",
			"; TODO: maybe set WrapStyle: 2",
			"WrapStyle: 0",
			"ScaledBorderAndShadow: yes",
			"YCbCr Matrix: PC.709",
			fmt.Sprintf("PlayResX: %d", width),
			fmt.Sprintf("PlayResY: %d", height),
			"",
			"[Aegisub Project Garbage]",
			"Last Style Storage: f",
			fmt.Sprintf("Video File: ?dummy:%f:10000:%d:%d:160:160:160:c", frameRate, width, height),
			fmt.Sprintf("Video AR Value: %.4F", ar),
			"Active Line: 0",
			"Video Zoom Percent: 2.000000",
			"",
			"[V4+ Styles]",
			"Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding",
			"Style: f,Arial,20,&H00000000,&H00000000,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,0,0,7,0,0,0,1",
			"",
			"[Events]",
			"Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text",
		},
	}
}

func (r *Renderer) RenderFrame(frameInfo types.FrameInformation, frame types.RenderedFrame) (result []string) {
	if len(r.Header) != 0 {
		result = append(result, r.Header...)
		r.Header = nil
	}

	objects := slices.Clone(frame)
	slices.SortStableFunc(objects, RenderedObjectDepthSort)

	var runningBuffer []*Line

	scale := types.ScaleTransform(types.NewVector2(GlobalSettings.VideoScaleMultiplier, GlobalSettings.VideoScaleMultiplier).Float64())

	animated := 0

	for _, object := range objects {
		obEntry := *BakeRenderedObjectGradients(object)
		object = &obEntry

		object.MatrixTransform = scale.Multiply(object.MatrixTransform) //TODO: order?

		depth := object.GetDepth()

		var tagsToTransition []*Line

		for i := len(r.RunningBuffer) - 1; i >= 0; i-- {
			tag := r.RunningBuffer[i]
			if depth.Equals(tag.Layer) && object.ObjectId == tag.ObjectId {
				tagsToTransition = append(tagsToTransition, tag)
				r.RunningBuffer = slices.Delete(r.RunningBuffer, i, i+1)
			}
		}
		slices.Reverse(tagsToTransition)

		canTransition := true
		var transitionedTags []*Line

		for _, tag := range tagsToTransition {
			tag = tag.Transition(frameInfo, object)
			if tag != nil {
				transitionedTags = append(transitionedTags, tag)
				tag.DropCache()
			} else {
				canTransition = false
				break
			}
		}

		if canTransition && len(transitionedTags) > 0 {
			animated += len(transitionedTags)
			runningBuffer = append(runningBuffer, transitionedTags...)
		} else {
			r.RunningBuffer = append(r.RunningBuffer, tagsToTransition...)

			for _, line := range LinesFromRenderObject(frameInfo, object, GlobalSettings.BakeTransforms) {
				line.Style = "f"
				line.DropCache()
				runningBuffer = append(runningBuffer, line)
			}
		}
	}

	fmt.Printf("[ASS] Total %d objects, %d flush, %d buffer, %d animated tags.\n", len(objects), len(r.RunningBuffer), len(runningBuffer), animated)

	//Flush non dupes
	for _, line := range r.RunningBuffer {
		line.Name += fmt.Sprintf(" f:%d>%d~%d", line.Start, line.End, line.End-line.Start+1)
		line.DropCache()
		result = append(result, line.Encode(frameInfo.GetFrameDuration()))
	}
	r.RunningBuffer = runningBuffer

	return result
}

func (r *Renderer) Flush(frameInfo types.FrameInformation) (result []string) {
	result = make([]string, 0, len(r.RunningBuffer))
	for _, line := range r.RunningBuffer {
		line.Name += fmt.Sprintf(" f:%d>%d~%d", line.Start, line.End, line.End-line.Start+1)
		line.DropCache()
		result = append(result, line.Encode(frameInfo.GetFrameDuration()))
	}
	r.RunningBuffer = r.RunningBuffer[:0]
	return result
}

func BakeRenderedObjectGradients(o *types.RenderedObject) *types.RenderedObject {
	var baked bool

	drawPathList := make(types.DrawPathList, 0, len(o.DrawPathList))

	for _, command := range o.DrawPathList {
		if fillStyleRecord, ok := command.Style.(*types.FillStyleRecord); ok {
			if gradient, ok := fillStyleRecord.Fill.(types.Gradient); ok {
				baked = true

				gradientClip := types.NewClipPath(command.Commands)
				//Convert gradients to many tags
				for _, gradientPath := range gradient.GetInterpolatedDrawPaths(0, GlobalSettings.GradientSlices) {
					newPath := types.DrawPath{
						Style:    gradientPath.Style,
						Commands: gradientClip.Intersect(types.NewClipPath(gradientPath.Commands)).GetShape(),
					}
					if len(newPath.Commands.Edges) == 0 {
						continue
					}

					drawPathList = append(drawPathList, newPath)
				}
				continue
			}
		}
		drawPathList = append(drawPathList, command)
	}

	if baked {
		return &types.RenderedObject{
			Depth:           o.Depth,
			ObjectId:        o.ObjectId,
			DrawPathList:    drawPathList,
			Clip:            o.Clip,
			ColorTransform:  o.ColorTransform,
			MatrixTransform: o.MatrixTransform,
		}
	} else {
		return o
	}
}

func RenderedObjectDepthSort(a, b *types.RenderedObject) int {
	if len(b.Depth) > len(a.Depth) {
		for i, depth := range b.Depth {
			var otherDepth uint16
			if i < len(a.Depth) {
				otherDepth = a.Depth[i]
			}

			if depth != otherDepth {
				return int(otherDepth) - int(depth)
			}
		}
	} else {
		for i, depth := range a.Depth {
			var otherDepth uint16
			if i < len(b.Depth) {
				otherDepth = b.Depth[i]
			}

			if depth != otherDepth {
				return int(depth) - int(otherDepth)
			}
		}
	}

	return 0
}
